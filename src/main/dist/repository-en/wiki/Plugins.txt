{{parent:Index}}
This manual describes how to write your own ''MoasdaWiki'' plug-in.

Table of Content
{{toc}}

= How a plug-in works

Plug-ins are designed to ''transform a wiki page'' on the fly. Those transformations are never stored, they are applied every time before a wiki page is shown.

A second feature is that a plug-in can ''register URL paths'' it wants to handle. This enables you to generate complete web pages and to handle HTML forms. Besides, the full wiki API is available.

A prominent example are the standard plug-ins of ''MoasdaWiki'' itself. Due to this ''MoasdaWiki'' can be used as application framework.

== Transformation of Wiki Pages

When requesting a wiki page with your browser, the following steps will happen internally:
# load wiki page from repository, get parsed wiki tree from cache
# apply plug-in 1
# apply plug-in 2
# etc.
# convert wiki tree into HTML representation and send to browser

To apply a plug-in, its @@transformWikiPage()@@ method is called. It operates on the wiki tree, the internal representation of a wiki page. The nodes of the wiki tree are Java objects of classes in the package @@net.moasdawiki.service.wiki.structure@@.

The plug-in order can be controlled by the @@@CallOrder@@ annotation:

@@
@CallOrder(5)
public WikiPage transformWikiPage(WikiPage wikiPage) {
  ...
}
@@

== Register URL paths

When requesting a URL that is linked to a plug-in, the following steps will happen internally:
# parse HTTP request from browser
# identify corresponding plug-in
# call @@handleRequest()@@ method of the plug-in, this will generate the response
# send HTTP response to browser

To register a URL path by a plug-in use the @@PathPattern@@ annotation:

@@
@PathPattern("/edit/.*")
public HttpResponse handleRequest(HttpRequest request) {
  ...
}
@@

To register more than one path:

@@
@PathPattern(multiValue = { "/view/.*", "/" })
public HttpResponse handleRequest(HttpRequest request) {
  ...
}
@@

The plug-in can access the complete HttpRequest and generates a HttpResponse object. Almost all URL paths of ''MoasdaWiki'' are handled by plug-ins which demonstrates the power of this approach.

= Write your own plug-in

== Implement Plugin interface

A plug-in is a Java class that has to implement the interface @@net.moasdawiki.plugin.Plugin@@: 
@@
public interface Plugin {
  void setServiceLocator(ServiceLocator serviceLocator);
  WikiPage transformWikiPage(WikiPage wikiPage);
  HttpResponse handleRequest(HttpRequest request);
}
@@

Each plug-in is instantiated once (singleton) by calling the default constructor. After that the @@setServiceLocator()@@ method is called to provide access to the API.

The @@transformWikiPage()@@ method is called if a wiki page is about to be rendered. It enables you to do any modification to the wiki page. But in normal case only specific page elements will be replaced, see example below. To specify the apply order of the plug-ins use the @@@CallOrder@@ annotation.

The @@handleRequest()@@ method is called whenever the user requests a URL in his browser that is
registered by the plug-in. The plug-in has to generate the response. To register
a URL path use the @@@PathPattern@@ annotation.

== Load plug-in

To make ''MoasdaWiki'' to load your plug-in, you have to add it to the configuration file [[/config]]. See @@plugin@@ options.

Note: A plug-in class will only be found if it is included in the classpath of the Java VM.

== Code example

As ''MoasdaWiki'' itself implements most of the features in plug-in
there are serveral code examples for using the API.

For a good example to transform a wiki page see the @@StandardWikiTagsPlugin@@.

For a simple example to register a URL path see the @@StandardViewPlugin@@.
A more complex example including HTML forms can be found in the @@StandardEditorPlugin@@.

== Internationalization

Translated messages in the message file [[messages]] can be accessed by
@@
messages.getMessage("key")
@@
